{
	"version":2,
	"filename":"index.html",
	"path_from_doc_root":"/blog/2009/07/12/how-to-write-a-very-very-very-simple-dimetric-3d-display-using-actionscript-3/",
	"category":"",
	"tags":"",
	"create_date":"2009-07-12",
	"title":"How to write a (very, very, very) simple dimetric 3D-display using ActionScript 3",
	"title_plain":"",
	"excerpt":"",
	"content":"<p>When expressing oneself in 3D there are lots and lots of frameworks and APIs, each of which having one or more drawbacks in terms of performance and/or portability (or  availability, depending on the programming language/environment).</p><p>Regarding the web <a title=\"Papervision 3d\" href=\"http://blog.papervision3d.org/\" target=\"_self\">papervision</a> was (and is) very helpfull. Still, one has to carry around a lot of code, which in some cases isn&#8217;t really needed. Plus the needs towards &#8220;real&#8221; 3D are not always there. Sometimes a simple dimetric display would do the job &#8211; but this needs to be &#8220;faked&#8221; within papervision, since it lacks an axonometric mode. Thus, on several occasions I ended up using a vast distance between the camera and the shown objects in combination with an equally big zoom to reduce perspective distortion.</p><p>Some projects really don&#8217;t need any advanced technique. No displacement- or bumpmapping, no texturing, no lighting, no translucency, etc. Just displaying coloured geometric primitives would suffice.</p><p>These simple geometric structures are made of planes, which in turn are made of lines, which are defined by points (speaking of a polygonal model). And there we are at the bottom, ready to go up again: The core class has to be a class describing a point within the three dimensional space.</p><pre>package simple3D {    class SpacePoint{        public var x:Number;        public var y:Number;        public var z:Number;         public function SpacePoint (param_x:Number,                                     param_y:Number,                                     param_z:Number) {             x = param_x;             y = param_y;             z = param_z;        }    }}</pre><p>This is pretty plain. We need three properties to define the position of the point within a 3D-space. The type of the variables must be Number, because we might want to tween the point using a nifty tweening class like the<a title=\"Google Code - Caurina Tweener\" href=\"http://code.google.com/p/tweener/\" target=\"_self\"> Caurina Tweener</a>, for example.</p><p>A class defining a point in three dimensional space is all very well, but it would still be pointless if we can&#8217;t project the point to a two dimensional display like a screen. So let&#8217;s add a method for projection to our SpacePoint-class:</p><pre>        public function project ():Point {            var x2D:Number = ORIGIN_X + x * X_INFLUENCE_BY_X                                      + z * X_INFLUENCE_BY_Z ;            var y2D:Number = ORIGIN_Y - y                                      - x * Y_INFLUENCE_BY_X                                      + z * Y_INFLUENCE_BY_Z ;            return new Point(x2D,y2D);        }</pre><p>Let&#8217;s have a closer look at this method. We need two numbers to define the projection of the 3D-point: x2D and y2D, which we will use to instantiate and return a 2D-Point, using the built-in class flash.geom.Point.</p><pre>ORIGIN_X</pre><p>and</p><pre>ORIGIN_Y</pre><p>are defining the position of the 3D-origin within the 2D-projection.</p><pre>x</pre><p>is simply the x-property of the SpacePoint which needs to be scaled with a factor</p><pre>0 &lt; X_INFLUENCE_BY_X &lt; 1</pre><p>because we do not want the x-axis of the 3D-space to be identical with the x-axis of the 2D-space.</p><pre>z</pre><p>is the z-property of the SpacePoint. It has no direct correspondent within the 2D-space, but it influences both x and y of the 2D-point.</p><p>The words written in uppercase are constants. They are identical for the projection of all our points, because we want all the points to reside in the same three dimensional space. The constants may be (and indeed are) declared static.<br />One of the advantages of this rather primitive looking approach is, that we can easily turn our dimetric projection into an isometric or any other axonometric projection by simply changing these constants before we compile the code.</p><p>Now that our SpacePoint class is ready to use let&#8217;s write some code for it.</p><pre>var square_xy:Array = new Array();// creating and storing the 3D-points for a xy-squaresquare_xy.push( new SpacePoint( 0,   0,   0 ) );square_xy.push( new SpacePoint( 0,   200, 0 ) );square_xy.push( new SpacePoint( 200, 200, 0 ) );square_xy.push( new SpacePoint( 200, 0,   0 ) );</pre><p>The code above simply instantiates an array and fills it with four SpacePoints. Since we now have a bunch of points neatly wrapped up inside an array, let&#8217;s write a function which takes the points and connects them:</p><pre>    // we might want to be able to define the colour of the lines    // to be drawn. Let's add a colour-parameter:       private function connect_points( points:Array,                                         colour:Number ):void{            var last_point:Point = points[ points.length - 1 ].project();            var start_x:Number = last_point.x;            var start_y:Number = last_point.y;            // moving the drawing positioning to the last point.            // this is simply for the sake of convenience - this way            // we can simply loop through our array and call the            // lineTo-method, without need for a an if-clause:            graphics.moveTo( start_x, start_y );            graphics.lineStyle( 1, colour );          // actually connecting the dots:         for each ( var p3D:SpacePoint in points ) {             var point_2D:Point =  p3D.project();             graphics.lineTo( point_2D.x, point_2D.y );         }    }</pre><p>Since the Main class must extend the Sprite class (or MovieClip class) in Action Script 3 we can use the drawing-API of the Main class directly to connect our points.</p><p>Adding a functioncall to our Main class like this:</p><pre>connect_points( square_xy, 0xFF0000 );</pre><p>&#8230; and compiling the code, the result looks like this:</p><div id=\"attachment_166\" style=\"width: 478px\" class=\"wp-caption alignnone\"><a href=\"http://www.drewing.de/blog/wp-content/uploads/2009/07/projected_square.jpg\"><img class=\"size-full wp-image-166\" title=\"projected_square\" src=\"http://www.drewing.de/blog/wp-content/uploads/2009/07/projected_square.jpg\" alt=\"The resulting dimetric projection of our first square\" width=\"468\" height=\"471\" srcset=\"https://www.drewing.de/blog/wp-content/uploads/2009/07/projected_square.jpg 468w, https://www.drewing.de/blog/wp-content/uploads/2009/07/projected_square-150x150.jpg 150w, https://www.drewing.de/blog/wp-content/uploads/2009/07/projected_square-298x300.jpg 298w\" sizes=\"(max-width: 468px) 100vw, 468px\" /></a><p class=\"wp-caption-text\">The resulting dimetric projection of our first square</p></div><p>Let&#8217;s have some more squares to get a better idea of our chosen projection method:</p><pre>            // Omne trinum perfectum:            var square_xy:Array = new Array();            var square_xz:Array = new Array();            var square_yz:Array = new Array();            // creating and storing the 3D-points for a xy-square            square_xy.push( new SpacePoint( 0,   0,   0 ) );            square_xy.push( new SpacePoint( 0,   200, 0 ) );            square_xy.push( new SpacePoint( 200, 200, 0 ) );            square_xy.push( new SpacePoint( 200, 0,   0 ) );            // creating and storing the 3D-points for a xz-square            square_xz.push( new SpacePoint( 0,    0,   0 ) );            square_xz.push( new SpacePoint( 0,    0, 200 ) );            square_xz.push( new SpacePoint( 200, 0, 200 ) );            square_xz.push( new SpacePoint( 200, 0,   0 ) );            // creating and storing the 3D-points for a yz-square            square_yz.push( new SpacePoint( 0,   0,   0 ) );            square_yz.push( new SpacePoint( 0,   0, 200 ) );            square_yz.push( new SpacePoint( 0, 200, 200 ) );            square_yz.push( new SpacePoint( 0, 200,   0 ) );            // actually drawing the square-outlines in different colours            connect_points( square_xy, 0xFF0000 );            connect_points( square_xz, 0x00FF00 );            connect_points( square_yz, 0x0000FF );</pre><p>And here is the rendering on the screen:</p><div id=\"attachment_167\" style=\"width: 478px\" class=\"wp-caption alignnone\"><a href=\"http://www.drewing.de/blog/wp-content/uploads/2009/07/three_projected_squares.jpg\"><img class=\"size-full wp-image-167\" title=\"three_projected_squares\" src=\"http://www.drewing.de/blog/wp-content/uploads/2009/07/three_projected_squares.jpg\" alt=\"three_projected_squares\" width=\"468\" height=\"471\" srcset=\"https://www.drewing.de/blog/wp-content/uploads/2009/07/three_projected_squares.jpg 468w, https://www.drewing.de/blog/wp-content/uploads/2009/07/three_projected_squares-150x150.jpg 150w, https://www.drewing.de/blog/wp-content/uploads/2009/07/three_projected_squares-298x300.jpg 298w\" sizes=\"(max-width: 468px) 100vw, 468px\" /></a><p class=\"wp-caption-text\">Three squares in our three dimensional space, projected to the screen</p></div><p>That&#8217;s it &#8211; we have a means to create a projection. Still, the <a href=\"http://www.drewing.de/blog/wp-content/uploads/2009/07/simple3d.zip\">code (zip including a compiled swf)</a> creates only one image and doesn&#8217;t update it.</p><p>To achive a kind of animated projection we would need to implement some further functionality &#8211; e.g. a function to clear and redraw the display, which could be implemented as a &#8220;Listener&#8221; (AS-Jargon for objects following the Observer-Pattern)Â  of an ENTER_FRAME-Event.</p><p>It would also be nice to have a method measuring the distance from a point to the image plane, plus a function to sort the 3D-Objects depending on their distance to it (thus implementing a realistic overlapping).</p><p>As mentioned above, I strongly recommend the <a title=\"Caurina Tweener\" href=\"http://code.google.com/p/tweener/\" target=\"_self\">Caurina Tweener</a> for programmatical animation, which in my opinion offers all the functionality programmatical animation needs.</p><p>P.S.: If you&#8217;re interested in the classical method of displaying three dimensional objects within a two dimensional space (read: drawing), you&#8217;ll find a a pretty good online guide at <a href=\"http://www.handprint.com/HP/WCL/tech10.html\">handprint.com</a>.</p>",
	"thumb_base64":"",
	"images_urls":[{"title":"How to write a (very, very, very) simple dimetric 3D-display using ActionScript 3","w_190":"","w_390":"http://www.drewing.de/blog/wp-content/uploads/2009/07/projected_square.jpg","w_800":"http://www.drewing.de/blog/wp-content/uploads/2009/07/projected_square.jpg","max_resolution":""}]
}